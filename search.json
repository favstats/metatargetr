[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 metatargetr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/google-transparency-report.html","id":"accessing-google-transparency-data","dir":"Articles","previous_headings":"","what":"Accessing Google Transparency Data","title":"Google Transparency Report Integration","text":"metatargetr provides integration Google Transparency Report ggl_get_spending() function:","code":"library(metatargetr) library(ggplot2)  # Get aggregated spending data spending_data <- ggl_get_spending(   advertiser_id = \"AR18091944865565769729\",   start_date = \"2023-10-24\",   end_date = \"2023-11-22\",   cntry = \"NL\" )"},{"path":"/articles/google-transparency-report.html","id":"time-based-analysis","dir":"Articles","previous_headings":"","what":"Time-Based Analysis","title":"Google Transparency Report Integration","text":"temporal analysis, use get_times parameter:","code":"# Get time-series data timeseries_data <- ggl_get_spending(   advertiser_id = \"AR18091944865565769729\",   start_date = \"2023-10-24\",   end_date = \"2023-11-22\",   cntry = \"NL\",   get_times = TRUE )  # Create visualization ggplot(timeseries_data, aes(x = date, y = spend)) +   geom_col() +   theme_minimal() +   labs(     title = \"Ad Spending Over Time\",     x = \"Date\",     y = \"Spend Amount\"   )"},{"path":"/articles/google-transparency-report.html","id":"understanding-the-metrics","dir":"Articles","previous_headings":"","what":"Understanding the Metrics","title":"Google Transparency Report Integration","text":"Google Transparency Report provides: Total spending amounts Ad type distribution Temporal patterns Regional variations","code":""},{"path":"/articles/introduction.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to metatargetr","text":"metatargetr R package designed parse analyze targeting information Meta Ad Library dataset retrieve data Audience tab. provides tools working Meta ad library data includes integration Google Transparency Report.","code":""},{"path":"/articles/introduction.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to metatargetr","text":"can install development version metatargetr GitHub:","code":"# install.packages(\"remotes\") remotes::install_github(\"favstats/metatargetr\")"},{"path":"/articles/introduction.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Introduction to metatargetr","text":"First, load package: package provides several core functions: get_targeting(): Retrieve recent targeting data get_targeting_db(): Access historical targeting data get_page_insights(): Get page information get_ad_snapshots(): Download ad creatives ggl_get_spending(): Access Google Transparency Report data functions documented detail following sections.","code":"library(metatargetr)"},{"path":"/articles/retrieve-historical-data.html","id":"accessing-historical-data","dir":"Articles","previous_headings":"","what":"Accessing Historical Data","title":"Retrieve Historical Data","text":"Meta‚Äôs API provides recent targeting data, metatargetr maintains archive historical targeting data. Access using get_targeting_db():","code":"library(metatargetr)  # Set parameters country_code <- \"DE\" timeframe <- 30 date <- \"2024-10-25\"  # Retrieve historical data historical_data <- get_targeting_db(country_code, timeframe, date)"},{"path":"/articles/retrieve-historical-data.html","id":"understanding-historical-data","dir":"Articles","previous_headings":"","what":"Understanding Historical Data","title":"Retrieve Historical Data","text":"historical data includes: - Daily targeting snapshots - Spending information - Page details - Targeting criteria used","code":""},{"path":"/articles/retrieve-historical-data.html","id":"getting-report-data","dir":"Articles","previous_headings":"","what":"Getting Report Data","title":"Retrieve Historical Data","text":"broader historical analysis, use get_report_db(): provides aggregated advertising reports including: Total spending Number ads Page information Temporal data","code":"report_data <- get_report_db(   country_code = \"DE\",   timeframe = 30,   date = \"2024-10-25\" )"},{"path":"/articles/retrieve-targeting-metadata.html","id":"overview-of-targeting-metadata","dir":"Articles","previous_headings":"","what":"Overview of Targeting Metadata","title":"Retrieve Targeting Metadata","text":"retrieve_targeting_metadata() function helps understand targeting data available archive. provides information : Available dates File sizes Data completeness Country coverage","code":""},{"path":"/articles/retrieve-targeting-metadata.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Retrieve Targeting Metadata","text":"","code":"library(metatargetr)  # Get metadata for Germany's 30-day data metadata <- retrieve_targeting_metadata(\"DE\", \"30\")  # View the metadata print(metadata)"},{"path":"/articles/retrieve-targeting-metadata.html","id":"understanding-the-output","dir":"Articles","previous_headings":"","what":"Understanding the Output","title":"Retrieve Targeting Metadata","text":"metadata includes: Country code Date stamps Timeframe information Data availability flags","code":""},{"path":"/articles/retrieve-targeting-metadata.html","id":"using-metadata-for-data-validation","dir":"Articles","previous_headings":"","what":"Using Metadata for Data Validation","title":"Retrieve Targeting Metadata","text":"#| eval: false # Check data availability retrieval metadata <- retrieve_targeting_metadata(‚ÄúDE‚Äù, ‚Äú30‚Äù) (nrow(metadata) > 0) { # Data available, proceed retrieval historical_data <- get_targeting_db(‚ÄúDE‚Äù, 30, metadata$ds[1]) }","code":""},{"path":"/articles/retrieving-targeting-data.html","id":"getting-recent-targeting-data","dir":"Articles","previous_headings":"","what":"Getting Recent Targeting Data","title":"Retrieving Targeting Data","text":"get_targeting() function allows retrieve targeting data specific time windows:","code":"library(metatargetr)  # Last 7 days last7 <- get_targeting(\"121264564551002\", timeframe = \"LAST_7_DAYS\")  # Last 30 days last30 <- get_targeting(\"121264564551002\", timeframe = \"LAST_30_DAYS\")  # Last 90 days last90 <- get_targeting(\"121264564551002\", timeframe = \"LAST_90_DAYS\")"},{"path":"/articles/retrieving-targeting-data.html","id":"understanding-the-output","dir":"Articles","previous_headings":"","what":"Understanding the Output","title":"Retrieving Targeting Data","text":"function returns data frame containing: Basic targeting information (gender, age, location) Detailed targeting options (interests, behaviors) Custom audience information Spending reach metrics","code":""},{"path":"/articles/retrieving-targeting-data.html","id":"getting-page-information","dir":"Articles","previous_headings":"","what":"Getting Page Information","title":"Retrieving Targeting Data","text":"Use get_page_insights() retrieve additional page information: returns details : Page name verification status Follower counts Page category Creation date","code":"page_info <- get_page_insights(\"121264564551002\", include_info = \"page_info\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabio Votta. Author, maintainer. Philipp Mendoza. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Votta F, Mendoza P (2025). metatargetr: Retrieve Parse Meta Ad Targeting Data. R package version 0.0.5, https://github.com/favstats/metatargetr.","code":"@Manual{,   title = {metatargetr: Retrieve and Parse Meta Ad Targeting Data},   author = {Fabio Votta and Philipp Mendoza},   year = {2025},   note = {R package version 0.0.5},   url = {https://github.com/favstats/metatargetr}, }"},{"path":"/index.html","id":"metatargetr-","dir":"","previous_headings":"","what":"Retrieve and Parse Meta Ad Targeting Data","title":"Retrieve and Parse Meta Ad Targeting Data","text":"goal metatargetr parse targeting information Meta Ad Targeting dataset retrieve data Audience tab Meta Ad Library. also includes helper functions Meta ad library data integrates data Google Transparency Report. üí° Support Open-Source Development metatargetr helpful , consider supporting project! Every contribution keeps maintenance work going helps develop new features üòä","code":""},{"path":"/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"Retrieve and Parse Meta Ad Targeting Data","text":"üöÄ Installation üì¶ Load Package ‚è≥ Last 30 Days üóìÔ∏è Last 7 Days üï∞Ô∏è Retrieve Historical Targeting Data üóÇÔ∏è Retrieve Historical Report Data ‚ÑπÔ∏è Get Page Info üîç Retrieve Targeting Metadata üñºÔ∏è Get Images Videos üí∞ Retrieve Aggregated Spending Data üìà Retrieve Time-Based Spending Data ‚úçÔ∏è Citing metatargetr","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Retrieve and Parse Meta Ad Targeting Data","text":"can install development version metatargetr like :","code":"remotes::install_github(\"favstats/metatargetr\")"},{"path":"/index.html","id":"load-in-package","dir":"","previous_headings":"","what":"Load in Package","title":"Retrieve and Parse Meta Ad Targeting Data","text":"","code":"library(metatargetr)"},{"path":"/index.html","id":"get-targeting-criteria-last-30-days","dir":"","previous_headings":"","what":"Get Targeting Criteria (Last 30 Days)","title":"Retrieve and Parse Meta Ad Targeting Data","text":"following code retrieves targeting criteria used main page VVD (Dutch party) last 30 days available data. Just put right Page ID. can found Meta Ad Library Meta Ad Library Report. can also retrieve historical report data maintained database.","code":"last30 <- get_targeting(id = \"121264564551002\",                          timeframe = \"LAST_30_DAYS\")  head(last30, 5) #>               value num_ads total_spend_pct     type location_type #> 1               All      44       1.0000000   gender          <NA> #> 2             Women       0       0.0000000   gender          <NA> #> 3               Men       0       0.0000000   gender          <NA> #> 4 5931, Netherlands       7       0.1598496 location          zips #> 5 9461, Netherlands       7       0.1598496 location          zips #>   num_obfuscated is_exclusion custom_audience_type         ds main_currency #> 1             NA           NA                 <NA> 2024-12-26           EUR #> 2             NA           NA                 <NA> 2024-12-26           EUR #> 3             NA           NA                 <NA> 2024-12-26           EUR #> 4              0        FALSE                 <NA> 2024-12-26           EUR #> 5              0        FALSE                 <NA> 2024-12-26           EUR #>   total_num_ads total_spend_formatted is_30_day_available is_90_day_available #> 1            44                ‚Ç¨7,606                TRUE                TRUE #> 2            44                ‚Ç¨7,606                TRUE                TRUE #> 3            44                ‚Ç¨7,606                TRUE                TRUE #> 4            44                ‚Ç¨7,606                TRUE                TRUE #> 5            44                ‚Ç¨7,606                TRUE                TRUE #>           page_id #> 1 121264564551002 #> 2 121264564551002 #> 3 121264564551002 #> 4 121264564551002 #> 5 121264564551002"},{"path":"/index.html","id":"get-targeting-criteria-last-7-days","dir":"","previous_headings":"","what":"Get Targeting Criteria (Last 7 Days)","title":"Retrieve and Parse Meta Ad Targeting Data","text":"following code retrieves targeting criteria used main page VVD (Dutch party) last 7 days. Just put right Page ID.","code":"last7 <- get_targeting(id = \"121264564551002\",                         timeframe = \"LAST_7_DAYS\")   head(last7, 5) #> # A tibble: 0 √ó 7 #> # ‚Ñπ 7 variables: ds <chr>, main_currency <chr>, total_num_ads <int>, #> #   total_spend_formatted <chr>, is_30_day_available <lgl>, #> #   is_90_day_available <lgl>, page_id <chr>"},{"path":"/index.html","id":"retrieve-historical-targeting-data-from-database","dir":"","previous_headings":"","what":"Retrieve Historical Targeting Data from Database","title":"Retrieve and Parse Meta Ad Targeting Data","text":"Unfortunately, using get_targeting can get targeting criteria last 7, 30, 90 days windows. However, set scrapers retrieve daily targeting data every single page world runs advertisements order archive data. can use function retrieve . aware: sometimes scrapers work possible pages missing. can use retrieve_targeting_metadata function check data country day present.","code":"# # set some parameters the_cntry <- \"DE\" tf <- 30 ds <- \"2024-10-25\"  # # Call the function latest_data <- get_targeting_db(the_cntry, tf, ds)  # # Inspect the data head(latest_data) #> # A tibble: 6 √ó 37 #>   internal_id no_data tstamp              page_id  cntry page_name partyfacts_id #>   <chr>       <lgl>   <dttm>              <chr>    <chr> <chr>     <chr>         #> 1 <NA>        NA      2024-10-27 19:12:35 7440553‚Ä¶ DE    CDU-Frak‚Ä¶ 1375          #> 2 <NA>        NA      2024-10-27 19:12:35 7440553‚Ä¶ DE    CDU-Frak‚Ä¶ 1375          #> 3 <NA>        NA      2024-10-27 19:12:35 7440553‚Ä¶ DE    CDU-Frak‚Ä¶ 1375          #> 4 <NA>        NA      2024-10-27 19:12:35 7440553‚Ä¶ DE    CDU-Frak‚Ä¶ 1375          #> 5 <NA>        NA      2024-10-27 19:12:35 7440553‚Ä¶ DE    CDU-Frak‚Ä¶ 1375          #> 6 <NA>        NA      2024-10-27 19:12:35 7440553‚Ä¶ DE    CDU-Frak‚Ä¶ 1375          #> # ‚Ñπ 30 more variables: sources <chr>, country <chr>, party <chr>, #> #   left_right <dbl>, tags <glue>, tags_ideology <chr>, disclaimer <chr>, #> #   amount_spent_eur <chr>, number_of_ads_in_library <chr>, date <chr>, #> #   path <chr>, tf <chr>, remove_em <lgl>, total_n <int>, amount_spent <dbl>, #> #   value <chr>, num_ads <int>, total_spend_pct <dbl>, type <chr>, #> #   location_type <chr>, num_obfuscated <int>, is_exclusion <lgl>, ds <chr>, #> #   main_currency <chr>, total_num_ads <int>, total_spend_formatted <dbl>, ‚Ä¶"},{"path":"/index.html","id":"retrieve-historical-report-data-from-the-database","dir":"","previous_headings":"","what":"Retrieve Historical Report Data from the Database","title":"Retrieve and Parse Meta Ad Targeting Data","text":"Using get_report_db, can retrieve archived advertising reports specific pages, countries, timeframes. Reports stored repository can downloaded read directly R. Note: strive keep archive complete, occasional scraper failures may lead missing data certain days.","code":"# # set some parameters the_cntry <- \"DE\" tf <- 30 ds <- \"2024-10-25\"  # # Call the function latest_data <- get_report_db(the_cntry, tf, ds)  # # Inspect the data head(latest_data) #> # A tibble: 6 √ó 9 #>   page_id     page_name disclaimer amount_spent_eur number_of_ads_in_lib‚Ä¶¬π date  #>   <chr>       <chr>     <chr>      <chr>            <chr>                  <chr> #> 1 2781178155‚Ä¶ EU Justi‚Ä¶ EU Justic‚Ä¶ 296508           28                     2024‚Ä¶ #> 2 1706886445‚Ä¶ UNICEF D‚Ä¶ UNICEF De‚Ä¶ 78283            79                     2024‚Ä¶ #> 3 1891313609‚Ä¶ LIQID In‚Ä¶ LIQID Inv‚Ä¶ 76300            88                     2024‚Ä¶ #> 4 1918513976‚Ä¶ VETO ‚Äì T‚Ä¶ VETO - Ti‚Ä¶ 71581            218                    2024‚Ä¶ #> 5 23216224900 Plan Int‚Ä¶ Plan Inte‚Ä¶ 62605            62                     2024‚Ä¶ #> 6 1612732458‚Ä¶ Save the‚Ä¶ Save the ‚Ä¶ 59891            195                    2024‚Ä¶ #> # ‚Ñπ abbreviated name: ¬π‚Äãnumber_of_ads_in_library #> # ‚Ñπ 3 more variables: path <chr>, tf <chr>, cntry <chr>"},{"path":"/index.html","id":"get-page-info","dir":"","previous_headings":"","what":"Get Page Info","title":"Retrieve and Parse Meta Ad Targeting Data","text":"can also retrieve page info page interested .","code":"page_info <- get_page_insights(\"121264564551002\", include_info = \"page_info\")   str(page_info) #> 'data.frame':    1 obs. of  20 variables: #>  $ page_name             : chr \"VVD\" #>  $ is_profile_page       : chr \"FALSE\" #>  $ page_is_deleted       : chr \"FALSE\" #>  $ page_is_restricted    : chr \"FALSE\" #>  $ has_blank_ads         : chr \"FALSE\" #>  $ hidden_ads            : chr \"0\" #>  $ page_profile_uri      : chr \"https://facebook.com/VVD\" #>  $ page_id               : chr \"121264564551002\" #>  $ page_verification     : chr \"BLUE_VERIFIED\" #>  $ entity_type           : chr \"PERSON_PROFILE\" #>  $ page_alias            : chr \"VVD\" #>  $ likes                 : chr \"108137\" #>  $ page_category         : chr \"Political party\" #>  $ ig_verification       : chr \"TRUE\" #>  $ ig_username           : chr \"vvd\" #>  $ ig_followers          : chr \"42137\" #>  $ shared_disclaimer_info: chr \"[]\" #>  $ about                 : chr \"Doe mee en word lid van de VVD! üíôüß° \" #>  $ event                 : chr \"CREATION: 2010-04-23 21:05:02\" #>  $ no_address            : logi TRUE"},{"path":"/index.html","id":"retrieve_targeting_metadata","dir":"","previous_headings":"","what":"retrieve_targeting_metadata()","title":"Retrieve and Parse Meta Ad Targeting Data","text":"retrieve_targeting_metadata function designed retrieve metadata targeting data releases GitHub repository see data present (). extracts organizes information file names, sizes, timestamps, tags specified country timeframe. metadata provides overview available targeting data without downloading actual files. country_code (Character): ISO country code (e.g., \"DE\" Germany, \"US\" United States). timeframe (Character): timeframe targeting data. Acceptable values : \"7\": Last 7 days. \"30\": Last 30 days. \"90\": Last 90 days. base_url (Character, default: \"https://github.com/favstats/meta_ad_targeting/releases/expanded_assets/\"): base URL GitHub repository hosting targeting data.","code":"# Retrieve metadata for Germany for the last 30 days metadata <- retrieve_targeting_metadata(\"DE\", \"30\")  print(metadata) #> # A tibble: 314 √ó 3 #>    cntry ds         tframe       #>    <chr> <chr>      <chr>        #>  1 DE    2024-12-26 last_30_days #>  2 DE    2024-12-25 last_30_days #>  3 DE    2024-12-24 last_30_days #>  4 DE    2024-12-23 last_30_days #>  5 DE    2024-12-22 last_30_days #>  6 DE    2024-12-21 last_30_days #>  7 DE    2024-12-20 last_30_days #>  8 DE    2024-12-19 last_30_days #>  9 DE    2024-12-18 last_30_days #> 10 DE    2024-12-17 last_30_days #> # ‚Ñπ 304 more rows"},{"path":"/index.html","id":"get-images-and-videos","dir":"","previous_headings":"","what":"Get Images and Videos","title":"Retrieve and Parse Meta Ad Targeting Data","text":"following code downloads images videos Meta ad. also retrieves additional info present Meta Ad Library API (e.g.¬†page_like_count cta_type .e.¬†call action button). Just put right Ad Archive ID. automatically handles duplicate images videos (many) hashing images videos making sure saved twice. piece code created collaboration Philipp Mendoza.","code":"get_ad_snapshots(\"561403598962843\", download = T, hashing = T, mediadir = \"data/media\") #> # A tibble: 1 √ó 52 #>   name  ad_creative_id cards         body_translations byline caption   cta_text #>   <chr>          <dbl> <list>        <lgl>             <lgl>  <chr>     <lgl>    #> 1 f      6269946734162 <df [2 √ó 16]> NA                NA     worldmil‚Ä¶ NA       #> # ‚Ñπ 45 more variables: dynamic_item_flags <lgl>, dynamic_versions <lgl>, #> #   edited_snapshots <lgl>, effective_authorization_category <chr>, #> #   event <lgl>, extra_images <lgl>, extra_links <lgl>, extra_texts <lgl>, #> #   extra_videos <lgl>, instagram_shopping_products <lgl>, #> #   display_format <chr>, title <chr>, link_description <chr>, link_url <chr>, #> #   page_welcome_message <lgl>, images <lgl>, videos <lgl>, #> #   creation_time <int>, page_id <dbl>, page_name <chr>, ‚Ä¶"},{"path":"/index.html","id":"google-transparency-report","dir":"","previous_headings":"","what":"Google Transparency Report","title":"Retrieve and Parse Meta Ad Targeting Data","text":"ggl_get_spending function R queries Google Transparency Report retrieve information advertising spending specified advertiser. supports range countries can provide either aggregated data time-based spending data. use ggl_get_spending, need advertiser‚Äôs unique identifier, desired date range, country code. function also option retrieve time-based spending data.","code":""},{"path":"/index.html","id":"retrieve-aggregated-spending-data","dir":"","previous_headings":"Google Transparency Report","what":"Retrieve Aggregated Spending Data","title":"Retrieve and Parse Meta Ad Targeting Data","text":"Retrieve aggregated spending data specific advertiser Netherlands. returns details like currency, number ads, ad type breakdown, advertiser details, metrics.","code":"ggl_get_spending(advertiser_id = \"AR18091944865565769729\",                   start_date = \"2023-10-24\",                   end_date = \"2023-11-22\",                  cntry = \"NL\") #> # A tibble: 1 √ó 18 #>   currency spend number_of_ads text_ad_perc text_ad_spend text_type vid_ad_perc #>   <chr>    <chr> <chr>                <dbl>         <dbl>     <int>       <dbl> #> 1 EUR      56050 160                  0.319         0.521         3       0.681 #> # ‚Ñπ 11 more variables: vid_ad_spend <dbl>, vid_type <int>, metric <int>, #> #   advertiser_id <chr>, advertiser_name <chr>, cntry <chr>, unk1 <int>, #> #   unk2 <int>, unk3 <int>, unk4 <chr>, unk5 <chr>"},{"path":"/index.html","id":"retrieve-time-based-spending-data","dir":"","previous_headings":"Google Transparency Report","what":"Retrieve Time-Based Spending Data","title":"Retrieve and Parse Meta Ad Targeting Data","text":"Retrieve time-based spending data advertiser country. get_times set TRUE, returns tibble date-wise spending data.","code":"# Retrieve time-based spending data for the same advertiser and country timeseries_dat <- ggl_get_spending(advertiser_id = \"AR18091944865565769729\",                                     start_date = \"2023-10-24\",                                     end_date = \"2023-11-22\",                                     cntry = \"NL\",                                     get_times = T)  # Plotting the time-series data timeseries_dat %>%      ggplot2::ggplot(ggplot2::aes(date, spend)) +     ggplot2::geom_col() +     ggplot2::theme_minimal()"},{"path":"/index.html","id":"citing-metatargetr","dir":"","previous_headings":"","what":"Citing metatargetr","title":"Retrieve and Parse Meta Ad Targeting Data","text":"use metatargetr package data database research, publications, outputs, please ensure provide proper attribution. helps recognize effort resources required maintain provide access data.","code":""},{"path":"/index.html","id":"citation-format","dir":"","previous_headings":"Citing metatargetr","what":"Citation Format","title":"Retrieve and Parse Meta Ad Targeting Data","text":"Votta, Fabio, & Mendoza, Philipp. (2024). metatargetr: package parsing analyzing ad library targeting data. GitHub. Available : https://github.com/favstats/metatargetr","code":""},{"path":"/index.html","id":"bibtex-entry","dir":"","previous_headings":"Citing metatargetr","what":"BibTeX Entry","title":"Retrieve and Parse Meta Ad Targeting Data","text":"","code":"@misc{votta2024metatargetr,   author = {Votta, Fabio and Mendoza, Philipp},   title = {metatargetr: A package for parsing and analyzing ad library and targeting data},   year = {2024},   publisher = {GitHub},   url = {https://github.com/favstats/metatargetr} }"},{"path":"/index.html","id":"additional-notes","dir":"","previous_headings":"Citing metatargetr","what":"Additional Notes","title":"Retrieve and Parse Meta Ad Targeting Data","text":"use data metatargetr database, please include following acknowledgement work: Data retrieved metatargetr database, maintained Fabio Votta. database archives targeting data Meta Ad Library Google Transparency Report. information, visit https://github.com/favstats/metatargetr. including citations acknowledgements, help support continued development metatargetr associated resources. Thank collaboration!","code":""},{"path":"/reference/aggr_targeting.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate a Pre-Combined Targeting Dataset ‚Äî aggr_targeting","title":"Aggregate a Pre-Combined Targeting Dataset ‚Äî aggr_targeting","text":"function takes single dataframe, assumed result bind_rows() multiple targeting datasets different time periods. correctly aggregates spending unique targeting criterion calculates new totals percentages based combined data.","code":""},{"path":"/reference/aggr_targeting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate a Pre-Combined Targeting Dataset ‚Äî aggr_targeting","text":"","code":"aggr_targeting(combined_df)"},{"path":"/reference/aggr_targeting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate a Pre-Combined Targeting Dataset ‚Äî aggr_targeting","text":"combined_df single dataframe already combined multiple sources (e.g., via dplyr::bind_rows). filter_disclaimer optional character vector disclaimers page names filter dataset aggregation. NULL (default), data used.","code":""},{"path":"/reference/aggr_targeting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate a Pre-Combined Targeting Dataset ‚Äî aggr_targeting","text":"single, aggregated tibble row represents unique targeting criterion advertiser across combined period.","code":""},{"path":"/reference/browser_close.html","id":null,"dir":"Reference","previous_headings":"","what":"Closes a Playwright browser instance ‚Äî browser_close","title":"Closes a Playwright browser instance ‚Äî browser_close","text":"function safely closes browser instance associated provided browser object. designed handle cases browser may already closed, preventing errors.","code":""},{"path":"/reference/browser_close.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Closes a Playwright browser instance ‚Äî browser_close","text":"","code":"browser_close(browser_df)"},{"path":"/reference/browser_close.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Closes a Playwright browser instance ‚Äî browser_close","text":"browser_df tibble returned browser_launch(), contains browser_id instance closed.","code":""},{"path":"/reference/browser_close.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Closes a Playwright browser instance ‚Äî browser_close","text":"Invisibly returns NULL. function called side effect closing browser.","code":""},{"path":"/reference/browser_close.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closes a Playwright browser instance ‚Äî browser_close","text":"","code":"if (FALSE) { # \\dontrun{ # Launch a browser browser <- browser_launch()  # ... perform actions with the browser ...  # Close the browser instance when done browser_close(browser) } # }"},{"path":"/reference/check_hash.html","id":null,"dir":"Reference","previous_headings":"","what":"Check hash of a media file ‚Äî check_hash","title":"Check hash of a media file ‚Äî check_hash","text":"Check hash media file","code":""},{"path":"/reference/check_hash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check hash of a media file ‚Äî check_hash","text":"","code":"check_hash(.x, hash_table, mediadir)"},{"path":"/reference/check_hash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check hash of a media file ‚Äî check_hash","text":".x Path media file. hash_table data frame existing hashes. mediadir Directory save media files.","code":""},{"path":"/reference/check_hash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check hash of a media file ‚Äî check_hash","text":"tibble file details.","code":""},{"path":"/reference/create_necessary_dirs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create necessary directories ‚Äî create_necessary_dirs","title":"Create necessary directories ‚Äî create_necessary_dirs","text":"Create necessary directories","code":""},{"path":"/reference/create_necessary_dirs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create necessary directories ‚Äî create_necessary_dirs","text":"","code":"create_necessary_dirs(x)"},{"path":"/reference/create_necessary_dirs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create necessary directories ‚Äî create_necessary_dirs","text":"x Directory path check create.","code":""},{"path":"/reference/create_necessary_dirs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create necessary directories ‚Äî create_necessary_dirs","text":"None (used side effects).","code":""},{"path":"/reference/detectmysnap.html","id":null,"dir":"Reference","previous_headings":"","what":"Updated function to detect the JSON code on Facebook ad websites ‚Äî detectmysnap","title":"Updated function to detect the JSON code on Facebook ad websites ‚Äî detectmysnap","text":"Updated function detect JSON code Facebook ad websites","code":""},{"path":"/reference/detectmysnap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updated function to detect the JSON code on Facebook ad websites ‚Äî detectmysnap","text":"","code":"detectmysnap(rawhtmlascharacter)"},{"path":"/reference/detectmysnap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updated function to detect the JSON code on Facebook ad websites ‚Äî detectmysnap","text":"rawhtmlascharacter Raw HTML content character string.","code":""},{"path":"/reference/detectmysnap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updated function to detect the JSON code on Facebook ad websites ‚Äî detectmysnap","text":"parsed JSON object.","code":""},{"path":"/reference/detectmysnap_dep.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the JSON code on Facebook ad websites ‚Äî detectmysnap_dep","title":"Detect the JSON code on Facebook ad websites ‚Äî detectmysnap_dep","text":"Function detect JSON code facebook ad websites contains media URLs basically str_extract perl!","code":""},{"path":"/reference/detectmysnap_dep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the JSON code on Facebook ad websites ‚Äî detectmysnap_dep","text":"","code":"detectmysnap_dep(rawhtmlascharacter)"},{"path":"/reference/detectmysnap_dep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect the JSON code on Facebook ad websites ‚Äî detectmysnap_dep","text":"rawhtmlascharacter Raw HTML content character string.","code":""},{"path":"/reference/detectmysnap_dep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect the JSON code on Facebook ad websites ‚Äî detectmysnap_dep","text":"parsed JSON object.","code":""},{"path":[]},{"path":"/reference/download_media.html","id":null,"dir":"Reference","previous_headings":"","what":"Download media files and potentially hash them ‚Äî download_media","title":"Download media files and potentially hash them ‚Äî download_media","text":"Download media files potentially hash ","code":""},{"path":"/reference/download_media.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download media files and potentially hash them ‚Äî download_media","text":"","code":"download_media(media_dat, mediadir = \"data/media\", hashing = T)"},{"path":"/reference/download_media.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download media files and potentially hash them ‚Äî download_media","text":"media_dat Data containing media URLs. mediadir Directory save media files. hashing Logical, whether hash files.","code":""},{"path":"/reference/download_media.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download media files and potentially hash them ‚Äî download_media","text":"None (used side effects).","code":""},{"path":"/reference/download_media_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Download media files with specified IDs ‚Äî download_media_int","title":"Download media files with specified IDs ‚Äî download_media_int","text":"Download media files specified IDs","code":""},{"path":"/reference/download_media_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download media files with specified IDs ‚Äî download_media_int","text":"","code":"download_media_int(id, x, n, mediadir = \"data/media\")"},{"path":"/reference/download_media_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download media files with specified IDs ‚Äî download_media_int","text":"id Ad ID. x Media URLs download. n Number URLs. mediadir Directory save media files.","code":""},{"path":"/reference/download_media_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download media files with specified IDs ‚Äî download_media_int","text":"character vector file paths.","code":""},{"path":"/reference/extract_media_urls.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract media URLs from data ‚Äî extract_media_urls","title":"Extract media URLs from data ‚Äî extract_media_urls","text":"Extract media URLs data","code":""},{"path":"/reference/extract_media_urls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract media URLs from data ‚Äî extract_media_urls","text":"","code":"extract_media_urls(yo)"},{"path":"/reference/extract_media_urls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract media URLs from data ‚Äî extract_media_urls","text":"yo Data containing potential media URLs.","code":""},{"path":"/reference/extract_media_urls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract media URLs from data ‚Äî extract_media_urls","text":"character vector media URLs.","code":""},{"path":"/reference/find_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Find an object in a nested list by name ‚Äî find_name","title":"Find an object in a nested list by name ‚Äî find_name","text":"Find object nested list name","code":""},{"path":"/reference/find_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find an object in a nested list by name ‚Äî find_name","text":"","code":"find_name(haystack, needle)"},{"path":"/reference/find_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find an object in a nested list by name ‚Äî find_name","text":"haystack nested list. needle Name object find.","code":""},{"path":"/reference/find_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find an object in a nested list by name ‚Äî find_name","text":"Object nested list given name NULL found.","code":""},{"path":"/reference/fix_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse JSON-formatted strings into named character vectors ‚Äî fix_json","title":"Parse JSON-formatted strings into named character vectors ‚Äî fix_json","text":"Parse JSON-formatted strings named character vectors","code":""},{"path":"/reference/fix_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse JSON-formatted strings into named character vectors ‚Äî fix_json","text":"","code":"fix_json(include)"},{"path":"/reference/fix_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse JSON-formatted strings into named character vectors ‚Äî fix_json","text":"include character vector JSON-formatted strings","code":""},{"path":"/reference/fix_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse JSON-formatted strings into named character vectors ‚Äî fix_json","text":"list named character vectors, vector represents parsed JSON object","code":""},{"path":"/reference/fix_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse JSON-formatted strings into named character vectors ‚Äî fix_json","text":"","code":"if (FALSE) { # \\dontrun{ # Parse an example character vector example_json <- c(\"{\\\"city\\\":\\\"Berlin\\\",\\\"zip_code\\\":\\\"12345\\\"}\",                   \"{\\\"city\\\":\\\"Munich\\\",\\\"zip_code\\\":\\\"67890\\\"}\") parsed_json <- fix_json(example_json)  # Check the resulting list of named character vectors parsed_json } # }"},{"path":"/reference/get_ad_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch many Facebook-Ad-Library pages (vectorised, cached, parallel) ‚Äî get_ad_html","title":"Fetch many Facebook-Ad-Library pages (vectorised, cached, parallel) ‚Äî get_ad_html","text":"Fetch many Facebook-Ad-Library pages (vectorised, cached, parallel)","code":""},{"path":"/reference/get_ad_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch many Facebook-Ad-Library pages (vectorised, cached, parallel) ‚Äî get_ad_html","text":"","code":"get_ad_html(   ad_ids,   country,   cache_dir = NULL,   overwrite = FALSE,   strip_css = TRUE,   max_active = 8,   log_failed_ids = NULL,   ua = NULL,   randomize_ua = NULL,   interactive = FALSE,   timeout_sec = 15,   retries = 3L,   quiet = FALSE,   return_type = c(\"paths\", \"list\") )"},{"path":"/reference/get_ad_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch many Facebook-Ad-Library pages (vectorised, cached, parallel) ‚Äî get_ad_html","text":"ad_ids Character vector Ad-Library IDs. country Two-letter country code. cache_dir Directory .html.gz files stored. Defaults value set interactive setup, \"html_cache\". overwrite FALSE (default) keep already-cached files. strip_css Run fast, regex-based CSS removal single-ID helper newly-downloaded pages. max_active Maximum number concurrent sockets passed httr2::req_perform_parallel() (default = 8). log_failed_ids character path provided (e.g., \"log.txt\"), log failed IDs written file. Default NULL (log file). ua User-Agent string. NULL (default), uses standard randomized UA based randomize_ua. randomize_ua Boolean. TRUE, random User-Agent chosen predefined list request make harder track. Defaults value set interactive setup, FALSE. interactive TRUE, run one-time interactive setup configure save default settings. Default FALSE. timeout_sec, retries Passed underlying requests. quiet Suppress progress messages. return_type \"paths\" (default) \"list\" -memory strings.","code":""},{"path":"/reference/get_ad_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch many Facebook-Ad-Library pages (vectorised, cached, parallel) ‚Äî get_ad_html","text":"Either named character vector file paths named list HTML strings, order ad_ids.","code":""},{"path":"/reference/get_ad_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Facebook Ad Library Report Data ‚Äî get_ad_report","title":"Get Facebook Ad Library Report Data ‚Äî get_ad_report","text":"Automates downloading Facebook Ad Library reports vectors countries, timeframes, dates. uses robust tryCatch block request ensure cleanup prevent hanging processes.","code":""},{"path":"/reference/get_ad_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Facebook Ad Library Report Data ‚Äî get_ad_report","text":"","code":"get_ad_report(country, timeframe, date)"},{"path":"/reference/get_ad_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Facebook Ad Library Report Data ‚Äî get_ad_report","text":"country character vector two-letter ISO country codes. timeframe character vector time windows (e.g., \"last_7_days\"). date character vector report dates \"YYYY-MM-DD\" format.","code":""},{"path":"/reference/get_ad_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Facebook Ad Library Report Data ‚Äî get_ad_report","text":"single tibble containing combined data successful requests.","code":""},{"path":"/reference/get_ad_snapshots.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ad snapshots from Facebook ad library ‚Äî get_ad_snapshots","title":"Get ad snapshots from Facebook ad library ‚Äî get_ad_snapshots","text":"Get ad snapshots Facebook ad library","code":""},{"path":"/reference/get_ad_snapshots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ad snapshots from Facebook ad library ‚Äî get_ad_snapshots","text":"","code":"get_ad_snapshots(ad_id, download = F, mediadir = \"data/media\", hashing = F)"},{"path":"/reference/get_ad_snapshots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ad snapshots from Facebook ad library ‚Äî get_ad_snapshots","text":"ad_id character string specifying ad ID. download Logical, whether download media files. mediadir Directory save media files. hashing Logical, whether hash files. RECOMMENDED!","code":""},{"path":"/reference/get_ad_snapshots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ad snapshots from Facebook ad library ‚Äî get_ad_snapshots","text":"tibble ad details.","code":""},{"path":"/reference/get_additional_page_info_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Page Info Dataset for a Specific Country ‚Äî get_additional_page_info_db","title":"Get Page Info Dataset for a Specific Country ‚Äî get_additional_page_info_db","text":"Downloads historical Facebook Instagram page info dataset given ISO2C country code. data retrieved fixed GitHub release URL .parquet format. includes information : Page-level metadata (e.g., name, verification status, profile type) Audience metrics (e.g., number likes, Instagram followers) Shared disclaimers (applicable) Page creation name change events timestamps Contact address information (available) Free-text descriptions (\"\" section)","code":""},{"path":"/reference/get_additional_page_info_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Page Info Dataset for a Specific Country ‚Äî get_additional_page_info_db","text":"","code":"get_additional_page_info_db(iso2c, verbose = TRUE)"},{"path":"/reference/get_additional_page_info_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Page Info Dataset for a Specific Country ‚Äî get_additional_page_info_db","text":"iso2c string specifying ISO-3166-1 alpha-2 country code (e.g., \"DE\", \"FR\", \"US\"). verbose Logical. TRUE (default), prints status message downloading.","code":""},{"path":"/reference/get_additional_page_info_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Page Info Dataset for a Specific Country ‚Äî get_additional_page_info_db","text":"tibble containing Facebook page info specified country. dataset available retrieved, tibble no_data = TRUE given iso2c code returned.","code":""},{"path":"/reference/get_additional_page_info_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Page Info Dataset for a Specific Country ‚Äî get_additional_page_info_db","text":"","code":"if (FALSE) { # \\dontrun{   de_info <- get_page_info_db(\"DE\")   fr_info <- get_page_info_db(\"FR\") } # }"},{"path":"/reference/get_ads_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and Parse Ad Library Data ‚Äî get_ads_info","title":"Get and Parse Ad Library Data ‚Äî get_ads_info","text":"wrapper function downloads ad HTMLs given set IDs country, parses data, returns final, reordered dataframe.","code":""},{"path":"/reference/get_ads_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and Parse Ad Library Data ‚Äî get_ads_info","text":"","code":"get_ads_info(ad_ids, country, keep_html = TRUE, cache_dir = \"html_cache\", ...)"},{"path":"/reference/get_ads_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and Parse Ad Library Data ‚Äî get_ads_info","text":"ad_ids character vector Ad Library IDs. country two-letter country code. keep_html logical flag. FALSE (default), cache directory downloaded HTML files deleted parsing. TRUE, files kept. cache_dir directory store downloaded HTML files. Defaults \"html_cache\". ... Additional arguments passed get_ad_html() (e.g., overwrite, quiet, max_active).","code":""},{"path":"/reference/get_ads_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and Parse Ad Library Data ‚Äî get_ads_info","text":"single, reordered dataframe containing parsed ad data.","code":""},{"path":"/reference/get_deeplink.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and flatten 'deeplinkAdCard' JSON from a Facebook Ad Library page ‚Äî get_deeplink","title":"Extract and flatten 'deeplinkAdCard' JSON from a Facebook Ad Library page ‚Äî get_deeplink","text":"function programmatically retrieves embedded JSON object labeled deeplinkAdCard source code Facebook Ad Library ad page.","code":""},{"path":"/reference/get_deeplink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and flatten 'deeplinkAdCard' JSON from a Facebook Ad Library page ‚Äî get_deeplink","text":"","code":"get_deeplink(ad_id)"},{"path":"/reference/get_deeplink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and flatten 'deeplinkAdCard' JSON from a Facebook Ad Library page ‚Äî get_deeplink","text":"ad_id Character string specifying Facebook ad ID (shown Ad Library URL).","code":""},{"path":"/reference/get_deeplink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and flatten 'deeplinkAdCard' JSON from a Facebook Ad Library page ‚Äî get_deeplink","text":"tibble one row, containing flattened columns extracted deeplink JSON object. Columns depend structure JSON may include fields like fevInfo_*, fevInfo_free_form_additional_info_*, fevInfo_learn_more_content_*, snapshot-related columns.","code":""},{"path":"/reference/get_deeplink.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract and flatten 'deeplinkAdCard' JSON from a Facebook Ad Library page ‚Äî get_deeplink","text":"function performs following steps internally: Fetches ad page HTML Facebook's Ad Library specified ad_id. Locates <script> tag containing deeplinkAdCard object. Uses recursive regular expression extract full JSON object following deeplinkAdCard. Parses JSON string nested R list. Flattens JSON tidy tibble row, unnesting nested sub-objects fevInfo, free_form_additional_info, learn_more_content, optionally snapshot present. output designed downstream analysis: ad represented one row tibble, nested JSON fields expanded columns via tidyr::unnest_wider(). function complements get_ad_snapshots(), extracts snapshot JSON. Use get_deeplink() additional metadata embedded deeplinkAdCard required.","code":""},{"path":[]},{"path":"/reference/get_deeplink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and flatten 'deeplinkAdCard' JSON from a Facebook Ad Library page ‚Äî get_deeplink","text":"","code":"if (FALSE) { # \\dontrun{ df <- get_deeplink(\"1103135646905363\") glimpse(df) } # }"},{"path":"/reference/get_ggl_ads.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch a Google Ads Transparency Report ‚Äî get_ggl_ads","title":"Fetch a Google Ads Transparency Report ‚Äî get_ggl_ads","text":"function automates process obtaining data Google Ads Transparency report. targets main data bundle, contains several CSV files. user can specify file process using either full filename convenient shorthand. default, downloaded files deleted data read memory.","code":""},{"path":"/reference/get_ggl_ads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch a Google Ads Transparency Report ‚Äî get_ggl_ads","text":"","code":"get_ggl_ads(file_to_read = \"creatives\", keep_file_at = NULL, quiet = FALSE)"},{"path":"/reference/get_ggl_ads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch a Google Ads Transparency Report ‚Äî get_ggl_ads","text":"file_to_read character string specifying CSV file read bundle, using either full filename shorthand alias (e.g., \"creatives\"). Defaults \"creatives\". keep_file_at character path directory selected CSV file saved. NULL (default), downloaded extracted files deleted. path provided, function save specified file_to_read location. quiet logical value. FALSE (default), function print status messages downloading processing.","code":""},{"path":"/reference/get_ggl_ads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch a Google Ads Transparency Report ‚Äî get_ggl_ads","text":"tibble (data frame) containing data selected CSV file.","code":""},{"path":"/reference/get_ggl_ads.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch a Google Ads Transparency Report ‚Äî get_ggl_ads","text":"Downloads latest Google Political Ads transparency data bundle (ZIP file), extracts specific CSV report, reads tibble, cleans downloaded extracted files. data bundle contains several files. user can specify file read using shorthand alias. Available Reports (Aliases): \"creatives\" (Default): google-political-ads-creative-stats.csv. primary detailed file. Contains statistics ad creative, including advertiser info, targeting details, spend. \"advertisers\": google-political-ads-advertiser-stats.csv. Aggregate statistics political advertiser. \"weekly_spend\": google-political-ads-advertiser-weekly-spend.csv. Advertiser spending aggregated week. \"geo_spend\": google-political-ads-geo-spend.csv. Overall spending aggregated geographic location. \"advertiser_geo_spend\": google-political-ads-advertiser-geo-spend.csv. Advertiser-specific spending aggregated US state. \"declarations\": google-political-ads-advertiser-declared-stats.csv. Self-declared information advertisers certain regions (e.g., California, New Zealand). \"advertiser_mapping\": advertiser_id_mapping.csv. mapping file reconcile different advertiser identifiers. \"creative_mapping\": creative_id_mapping.csv. mapping file reconcile different ad creative identifiers. \"updated_date\": google-political-ads-updated.csv. single-entry file indicating last time report data refreshed. \"campaigns\" (Deprecated): google-political-ads-campaign-targeting.csv. Ad-level targeting now \"creatives\" file. \"keywords\" (Discontinued): google-political-ads-top-keywords-history.csv. Historical data top keywords, terminated Dec 2019. details specific fields file, please refer Google Ads Transparency Report documentation.","code":""},{"path":"/reference/get_ggl_ads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch a Google Ads Transparency Report ‚Äî get_ggl_ads","text":"","code":"if (FALSE) { # \\dontrun{  # Fetch the main creative stats report using the default alias creative_stats <- get_ggl_ads()  # Fetch the advertiser stats report using its alias advertiser_stats <- get_ggl_ads(file_to_read = \"advertisers\")  # Fetch the advertiser ID mapping file advertiser_map <- get_ggl_ads(file_to_read = \"advertiser_mapping\")  # Fetch the geo spend report using its full filename geo_spend_report <- get_ggl_ads(   file_to_read = \"google-political-ads-geo-spend.csv\" )  # Fetch the main report and save the CSV file to a \"data\" folder creative_stats_saved <- get_ggl_ads(   file_to_read = \"creatives\",   keep_file_at = \"data/\" ) } # }"},{"path":"/reference/get_page_info_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Page Info Dataset for a Specific Country ‚Äî get_page_info_db","title":"Get Page Info Dataset for a Specific Country ‚Äî get_page_info_db","text":"Downloads historical Facebook Instagram page info dataset given ISO2C country code. data retrieved fixed GitHub release URL .parquet format. includes information : Page-level metadata (e.g., name, verification status, profile type) Audience metrics (e.g., number likes, Instagram followers) Shared disclaimers (applicable) Page creation name change events timestamps Contact address information (available) Free-text descriptions (\"\" section)","code":""},{"path":"/reference/get_page_info_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Page Info Dataset for a Specific Country ‚Äî get_page_info_db","text":"","code":"get_page_info_db(iso2c, verbose = TRUE)"},{"path":"/reference/get_page_info_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Page Info Dataset for a Specific Country ‚Äî get_page_info_db","text":"iso2c string specifying ISO-3166-1 alpha-2 country code (e.g., \"DE\", \"FR\", \"US\"). verbose Logical. TRUE (default), prints status message downloading.","code":""},{"path":"/reference/get_page_info_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Page Info Dataset for a Specific Country ‚Äî get_page_info_db","text":"tibble containing Facebook page info specified country. dataset available retrieved, tibble no_data = TRUE given iso2c code returned.","code":""},{"path":"/reference/get_page_info_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Page Info Dataset for a Specific Country ‚Äî get_page_info_db","text":"","code":"if (FALSE) { # \\dontrun{   de_info <- get_page_info_db(\"DE\")   fr_info <- get_page_info_db(\"FR\") } # }"},{"path":"/reference/get_page_insights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Page Insights ‚Äî get_page_insights","title":"Get Page Insights ‚Äî get_page_insights","text":"Retrieves insights given Facebook page within specified timeframe, language, country. allows fetching specific types information optionally joining page info targeting info.","code":""},{"path":"/reference/get_page_insights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Page Insights ‚Äî get_page_insights","text":"","code":"get_page_insights(   pageid,   timeframe = \"LAST_30_DAYS\",   lang = \"en-GB\",   iso2c = \"US\",   include_info = c(\"page_info\", \"targeting_info\"),   join_info = T )"},{"path":"/reference/get_page_insights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Page Insights ‚Äî get_page_insights","text":"pageid string specifying unique identifier Facebook page. timeframe string indicating timeframe insights. Valid options include predefined timeframes \"LAST_30_DAYS\". default value \"LAST_30_DAYS\". lang string representing language locale use request, formatted language code followed country code (e.g., \"en-GB\" English, United Kingdom). default \"en-GB\". iso2c string specifying ISO-3166-1 alpha-2 country code insights requested. default \"US\". include_info character vector specifying types information include output. Possible values \"page_info\" \"targeting_info\". default, types information included. join_info logical value indicating whether join page info targeting info single data frame (TRUE) return separate elements list (FALSE). default TRUE.","code":""},{"path":"/reference/get_page_insights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Page Insights ‚Äî get_page_insights","text":"join_info TRUE, returns data frame combining page targeting information specified Facebook page. join_info FALSE, returns list two elements: page_info targeting_info, containing respective data data frame. case errors data available, function may return simplified data frame list indicating absence data.","code":""},{"path":"/reference/get_page_insights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Page Insights ‚Äî get_page_insights","text":"","code":"insights <- get_page_insights(pageid=\"123456789\", timeframe=\"LAST_30_DAYS\", lang=\"en-GB\", iso2c=\"US\",                               include_info=c(\"page_info\", \"targeting_info\"), join_info=TRUE)"},{"path":"/reference/get_report_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Report Data from GitHub Repository ‚Äî get_report_db","title":"Retrieve Report Data from GitHub Repository ‚Äî get_report_db","text":"function retrieves report specific country timeframe GitHub repository hosting RDS files. file downloaded temporary location, read R, deleted.","code":""},{"path":"/reference/get_report_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Report Data from GitHub Repository ‚Äî get_report_db","text":"","code":"get_report_db(the_cntry, timeframe, ds, verbose = FALSE)"},{"path":"/reference/get_report_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Report Data from GitHub Repository ‚Äî get_report_db","text":"the_cntry Character. ISO country code (e.g., \"DE\", \"US\"). timeframe Character Numeric. Timeframe days (e.g., \"30\", \"90\") \"yesterday\" / \"lifelong\". ds Character. timestamp identifier used construct file name (e.g., \"2024-12-25\"). verbose Logical. Whether print messages process. Default FALSE.","code":""},{"path":"/reference/get_report_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Report Data from GitHub Repository ‚Äî get_report_db","text":"data frame object read RDS file.","code":""},{"path":"/reference/get_report_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Report Data from GitHub Repository ‚Äî get_report_db","text":"","code":"# Example usage report_data <- get_report_db(   the_cntry = \"DE\",   timeframe = 30,   ds = \"2024-12-25\",   verbose = TRUE ) #> Constructed URL: https://github.com/favstats/meta_ad_reports/releases/download/DE-last_30_days/2024-12-25.rds #> Downloading to temporary file: /tmp/Rtmprigfus/file1e3c665c74f6.rds #> File successfully downloaded. #> Data successfully read from the RDS file. #> Temporary file deleted. print(head(report_data)) #> # A tibble: 6 √ó 9 #>   page_id     page_name disclaimer amount_spent_eur number_of_ads_in_lib‚Ä¶¬π date  #>   <chr>       <chr>     <chr>      <chr>            <chr>                  <chr> #> 1 23216224900 Plan Int‚Ä¶ Plan Inte‚Ä¶ 233281           62                     2024‚Ä¶ #> 2 3414866596‚Ä¶ FDP Frak‚Ä¶ Fraktion ‚Ä¶ 187376           48                     2024‚Ä¶ #> 3 2010653532‚Ä¶ yello     yello      181760           26                     2024‚Ä¶ #> 4 4603703838‚Ä¶ Robert H‚Ä¶ B√ºndnis 9‚Ä¶ 134610           250                    2024‚Ä¶ #> 5 1918513976‚Ä¶ VETO ‚Äì T‚Ä¶ VETO - Ti‚Ä¶ 118816           112                    2024‚Ä¶ #> 6 21289227249 FDP       FDP        104284           141                    2024‚Ä¶ #> # ‚Ñπ abbreviated name: ¬π‚Äãnumber_of_ads_in_library #> # ‚Ñπ 3 more variables: path <chr>, tf <chr>, cntry <chr>"},{"path":"/reference/get_targeting.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Meta Ad Library targeting data for a page ‚Äî get_targeting","title":"Get Meta Ad Library targeting data for a page ‚Äî get_targeting","text":"function retrieves data targeting criteria Facebook page specified timeframe.","code":""},{"path":"/reference/get_targeting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Meta Ad Library targeting data for a page ‚Äî get_targeting","text":"","code":"get_targeting(id, timeframe = \"LAST_30_DAYS\", lang = \"en-GB\", legacy = FALSE)"},{"path":"/reference/get_targeting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Meta Ad Library targeting data for a page ‚Äî get_targeting","text":"id character string representing Facebook page ID. timeframe character string representing desired timeframe. Can either \"LAST_30_DAYS\" \"LAST_7_DAYS\". Defaults \"LAST_30_DAYS\". lang ISO language code character string representing desired language targeting criteria. Defaults \"en-GB\" can \"en-US\" many .","code":""},{"path":"/reference/get_targeting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Meta Ad Library targeting data for a page ‚Äî get_targeting","text":"tibble containing audience data specified Facebook page timeframe.","code":""},{"path":"/reference/get_targeting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Meta Ad Library targeting data for a page ‚Äî get_targeting","text":"","code":"if (FALSE) { # \\dontrun{ get_targeting(\"123456789\") get_targeting(\"987654321\", \"LAST_7_DAYS\") } # }"},{"path":"/reference/get_targeting_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Targeting Data from GitHub Repository ‚Äî get_targeting_db","title":"Retrieve Targeting Data from GitHub Repository ‚Äî get_targeting_db","text":"function retrieves targeting data specific country timeframe GitHub repository hosting parquet files. function uses arrow package read parquet file directly specified URL. Note retreival archived data possible three days specified date.","code":""},{"path":"/reference/get_targeting_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Targeting Data from GitHub Repository ‚Äî get_targeting_db","text":"","code":"get_targeting_db(the_cntry, tf, ds, remove_nas = T, verbose = F)"},{"path":"/reference/get_targeting_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Targeting Data from GitHub Repository ‚Äî get_targeting_db","text":"the_cntry Character. ISO country code (e.g., \"DE\", \"US\"). tf Numeric character. timeframe days (\"yesterday\", \"7\", \"30\", \"90\", \"lifelong\"). Note, data points lifelong past may missing countries. ds Character. timestamp identifier used construct file path (e.g., \"2024-12-25\").","code":""},{"path":"/reference/get_targeting_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Targeting Data from GitHub Repository ‚Äî get_targeting_db","text":"data frame containing targeting data parquet file.","code":""},{"path":"/reference/get_targeting_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Targeting Data from GitHub Repository ‚Äî get_targeting_db","text":"","code":"# Example usage latest_data <- get_targeting_db(   the_cntry = \"DE\",   tf = 30,   ds = \"2024-10-25\" ) print(head(latest_data)) #> # A tibble: 6 √ó 37 #>   internal_id no_data tstamp              page_id  cntry page_name partyfacts_id #>   <chr>       <lgl>   <dttm>              <chr>    <chr> <chr>     <chr>         #> 1 NA          NA      2024-10-27 18:12:35 7440553‚Ä¶ DE    CDU-Frak‚Ä¶ 1375          #> 2 NA          NA      2024-10-27 18:12:35 7440553‚Ä¶ DE    CDU-Frak‚Ä¶ 1375          #> 3 NA          NA      2024-10-27 18:12:35 7440553‚Ä¶ DE    CDU-Frak‚Ä¶ 1375          #> 4 NA          NA      2024-10-27 18:12:35 7440553‚Ä¶ DE    CDU-Frak‚Ä¶ 1375          #> 5 NA          NA      2024-10-27 18:12:35 7440553‚Ä¶ DE    CDU-Frak‚Ä¶ 1375          #> 6 NA          NA      2024-10-27 18:12:35 7440553‚Ä¶ DE    CDU-Frak‚Ä¶ 1375          #> # ‚Ñπ 30 more variables: sources <chr>, country <chr>, party <chr>, #> #   left_right <dbl>, tags <glue>, tags_ideology <chr>, disclaimer <chr>, #> #   amount_spent_eur <chr>, number_of_ads_in_library <chr>, date <chr>, #> #   path <chr>, tf <chr>, remove_em <lgl>, total_n <int>, amount_spent <dbl>, #> #   value <chr>, num_ads <int>, total_spend_pct <dbl>, type <chr>, #> #   location_type <chr>, num_obfuscated <int>, is_exclusion <lgl>, ds <chr>, #> #   main_currency <chr>, total_num_ads <int>, total_spend_formatted <dbl>, ‚Ä¶"},{"path":"/reference/get_targeting_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Metadata for Targeting Data ‚Äî get_targeting_metadata","title":"Retrieve Metadata for Targeting Data ‚Äî get_targeting_metadata","text":"function retrieves metadata targeting data releases specific country timeframe GitHub repository.","code":""},{"path":"/reference/get_targeting_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Metadata for Targeting Data ‚Äî get_targeting_metadata","text":"","code":"get_targeting_metadata(   country_code,   timeframe,   base_url = \"https://github.com/favstats/meta_ad_targeting/releases/expanded_assets/\" )"},{"path":"/reference/get_targeting_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Metadata for Targeting Data ‚Äî get_targeting_metadata","text":"country_code Character. ISO country code (e.g., \"DE\", \"US\"). timeframe Character. timeframe filter (e.g., \"7\", \"30\", \"90\"). base_url Character. base URL GitHub repository. Defaults \"https://github.com/favstats/meta_ad_targeting/releases/\".","code":""},{"path":"/reference/get_targeting_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Metadata for Targeting Data ‚Äî get_targeting_metadata","text":"data frame containing metadata available targeting data, including file names, sizes, timestamps, tags.","code":""},{"path":"/reference/get_targeting_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Metadata for Targeting Data ‚Äî get_targeting_metadata","text":"","code":"# Retrieve metadata for Germany for the last 30 days metadata <- get_targeting_metadata(\"DE\", \"30\") print(metadata) #> # A tibble: 495 √ó 3 #>    cntry ds         tframe       #>    <chr> <chr>      <chr>        #>  1 DE    2025-07-13 last_30_days #>  2 DE    2025-07-12 last_30_days #>  3 DE    2025-07-11 last_30_days #>  4 DE    2025-07-10 last_30_days #>  5 DE    2025-07-09 last_30_days #>  6 DE    2025-07-08 last_30_days #>  7 DE    2025-07-07 last_30_days #>  8 DE    2025-07-06 last_30_days #>  9 DE    2025-07-05 last_30_days #> 10 DE    2025-07-04 last_30_days #> # ‚Ñπ 485 more rows"},{"path":"/reference/ggl_get_spending.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Google Ad Spending Data ‚Äî ggl_get_spending","title":"Retrieve Google Ad Spending Data ‚Äî ggl_get_spending","text":"function queries Google Ad Library retrieve information advertising spending specified advertiser. supports range countries can return either aggregated data time-based spending data.","code":""},{"path":"/reference/ggl_get_spending.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Google Ad Spending Data ‚Äî ggl_get_spending","text":"","code":"ggl_get_spending(   advertiser_id,   start_date = 20231029,   end_date = 20231128,   cntry = \"NL\",   get_times = F )"},{"path":"/reference/ggl_get_spending.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Google Ad Spending Data ‚Äî ggl_get_spending","text":"advertiser_id string representing unique identifier advertiser. example \"AR14716708051084115969\". start_date integer representing start date data retrieval YYYYMMDD format.  example 20231029. end_date integer representing end date data retrieval YYYYMMDD format. example 20231128. cntry string representing country code data retrieved. example \"NL\" (Netherlands). get_times boolean indicating whether return time-based spending data. FALSE, returns aggregated data. Default FALSE.","code":""},{"path":"/reference/ggl_get_spending.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Google Ad Spending Data ‚Äî ggl_get_spending","text":"tibble containing advertising spending data. get_times TRUE, function returns tibble date-wise spending data. Otherwise, returns tibble aggregated spending data, including details like currency, number ads, ad type breakdown, advertiser details, metrics.","code":""},{"path":"/reference/ggl_get_spending.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Google Ad Spending Data ‚Äî ggl_get_spending","text":"","code":"# Retrieve aggregated spending data for a specific advertiser in the Netherlands spending_data <- ggl_get_spending(advertiser_id = \"AR14716708051084115969\",                                   start_date = 20231029, end_date = 20231128,                                   cntry = \"NL\")  # Retrieve time-based spending data for the same advertiser and country time_based_data <- ggl_get_spending(advertiser_id = \"AR14716708051084115969\",                                     start_date = 20231029, end_date = 20231128,                                     cntry = \"NL\", get_times = TRUE)"},{"path":"/reference/map_dfr_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to each element of a list with a progress bar ‚Äî map_dfr_progress","title":"Apply a function to each element of a list with a progress bar ‚Äî map_dfr_progress","text":"Adding progress bar map_dfr function https://www.jamesatkins.net/posts/progress-bar--purrr-map-df/","code":""},{"path":"/reference/map_dfr_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to each element of a list with a progress bar ‚Äî map_dfr_progress","text":"","code":"map_dfr_progress(.x, .f, ...)"},{"path":"/reference/map_dfr_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to each element of a list with a progress bar ‚Äî map_dfr_progress","text":".x List iterate . .f Function apply. ... parameters passed purrr::map_dfr. .id identifier.","code":""},{"path":"/reference/map_dfr_progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to each element of a list with a progress bar ‚Äî map_dfr_progress","text":"aggregated data frame.","code":""},{"path":"/reference/parse_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Location from Ad Targeting Dataset ‚Äî parse_location","title":"Parse Location from Ad Targeting Dataset ‚Äî parse_location","text":"function parse location strings Ad Targeting Dataset split separate columns level detail.","code":""},{"path":"/reference/parse_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Location from Ad Targeting Dataset ‚Äî parse_location","text":"","code":"parse_location(.x, loc_var, type = \"include\", verbose = T)"},{"path":"/reference/parse_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Location from Ad Targeting Dataset ‚Äî parse_location","text":".x data.frame containing location string loc_var character string specifying name column .x contains location string type character string specifying prefix add column split location details. Default \"include\". \"include\" \"exclude\". verbose logical flag specifying whether display progress bar processing. Default TRUE.","code":""},{"path":"/reference/parse_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Location from Ad Targeting Dataset ‚Äî parse_location","text":"data.frame columns level detail location.","code":""},{"path":"/reference/parse_location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Location from Ad Targeting Dataset ‚Äî parse_location","text":"","code":"if (FALSE) { # \\dontrun{   ### create a dataset with unique include_location values   distinct_data <- targeting_data %>%     distinct(include_location)    #### parse the location data and join in original dataset   distinct_data %>%     parse_location(include_location, type = \"include\") %>%     right_join(targeting_data)    ###----####    ### create a dataset with unique exclude_location values   distinct_data <- targeting_data %>%     distinct(exclude_location)    #### parse the location data and join in original dataset   distinct_data %>%     parse_location(exclude_location, type = \"exclude\") %>%     right_join(targeting_data)  } # }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator ‚Äî %>%","title":"Pipe operator ‚Äî %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator ‚Äî %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator ‚Äî %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator ‚Äî %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/set_metatargetr_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactively Set and Save User Settings ‚Äî set_metatargetr_options","title":"Interactively Set and Save User Settings ‚Äî set_metatargetr_options","text":"Launches interactive command-line interface help users configure save default package options, cache directory user-agent randomization preference.","code":""},{"path":"/reference/set_metatargetr_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactively Set and Save User Settings ‚Äî set_metatargetr_options","text":"","code":"set_metatargetr_options()"},{"path":"/reference/set_metatargetr_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interactively Set and Save User Settings ‚Äî set_metatargetr_options","text":"function guide user setting following options: metatargetr.cache_dir: default directory save HTML files. metatargetr.randomize_ua: Whether use random User-Agents default. user also prompted save settings environment variables personal .Renviron file persistence across R sessions.","code":""},{"path":"/reference/setup_playwright.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up and initialize the playwrightr environment ‚Äî setup_playwright","title":"Set up and initialize the playwrightr environment ‚Äî setup_playwright","text":"Set initialize playwrightr environment","code":""},{"path":"/reference/setup_playwright.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up and initialize the playwrightr environment ‚Äî setup_playwright","text":"","code":"setup_playwright()"},{"path":"/reference/stupid_conversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an entry for an ad into a row in a tibble ‚Äî stupid_conversion","title":"Convert an entry for an ad into a row in a tibble ‚Äî stupid_conversion","text":"manage easily output entry one ad row tibble; line solves issue exactly .","code":""},{"path":"/reference/stupid_conversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an entry for an ad into a row in a tibble ‚Äî stupid_conversion","text":"","code":"stupid_conversion(x)"},{"path":"/reference/stupid_conversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an entry for an ad into a row in a tibble ‚Äî stupid_conversion","text":"x object containing data ad.","code":""},{"path":"/reference/stupid_conversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an entry for an ad into a row in a tibble ‚Äî stupid_conversion","text":"tibble row.","code":""},{"path":"/reference/unnest_and_fix_dups.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest interest targeting data ‚Äî unnest_and_fix_dups","title":"Unnest interest targeting data ‚Äî unnest_and_fix_dups","text":"unnest fix duplicates interest targeting data Ad Targeting Dataset function unnests \"include\" \"exclude\" columns Ad Targeting Dataset, removes duplicates.","code":""},{"path":"/reference/unnest_and_fix_dups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest interest targeting data ‚Äî unnest_and_fix_dups","text":"","code":"unnest_and_fix_dups(dat, the_list, new_name)"},{"path":"/reference/unnest_and_fix_dups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest interest targeting data ‚Äî unnest_and_fix_dups","text":"dat data frame the_list column name unnest new_name name new column unnesting fixing duplicates","code":""},{"path":"/reference/unnest_and_fix_dups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest interest targeting data ‚Äî unnest_and_fix_dups","text":"modified data frame unnested deduplicated values","code":""},{"path":"/reference/unnest_and_fix_dups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest interest targeting data ‚Äî unnest_and_fix_dups","text":"","code":"### example usage: ## make sure you have the variable 'archive_id' in your data ad_targeting_data %>%     rowwise() %>%     mutate(include_list = fix_json(include)) %>%     ungroup() %>%     ## the_list: the parsed list of JSON, new_name: what the parsed column should be called    unnest_and_fix_dups(the_list = include_list, new_name = \"parsed_include\") #> Error in ungroup(.): could not find function \"ungroup\""},{"path":"/reference/walk_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Walk through a list with a progress bar ‚Äî walk_progress","title":"Walk through a list with a progress bar ‚Äî walk_progress","text":"Walk list progress bar","code":""},{"path":"/reference/walk_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Walk through a list with a progress bar ‚Äî walk_progress","text":"","code":"walk_progress(.x, .f, ...)"},{"path":"/reference/walk_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Walk through a list with a progress bar ‚Äî walk_progress","text":".x List iterate . .f Function apply. ... parameters passed purrr::map_dfr.","code":""},{"path":"/reference/walk_progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Walk through a list with a progress bar ‚Äî walk_progress","text":"None (used side effects).","code":""}]
